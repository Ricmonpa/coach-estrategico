import type { Goal, Notification, CoachReminder } from '../types/index';

export class NotificationService {
  private notifications: Notification[] = [];

  constructor() {
    this.loadNotifications();
  }

  private loadNotifications() {
    // En una implementaci√≥n real, esto vendr√≠a de localStorage o una API
    const stored = localStorage.getItem('coach-notifications');
    if (stored) {
      this.notifications = JSON.parse(stored);
    }
  }

  private saveNotifications() {
    localStorage.setItem('coach-notifications', JSON.stringify(this.notifications));
  }

  // Detectar metas estancadas (sin progreso en los √∫ltimos 7 d√≠as)
  private isGoalStuck(goal: Goal): boolean {
    if (goal.progressHistory.length < 2) return false;
    
    const lastUpdate = goal.lastUpdated;
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    
    return lastUpdate < sevenDaysAgo && goal.status === 'En Progreso';
  }

  // Detectar metas que necesitan atenci√≥n urgente
  private needsUrgentAttention(goal: Goal): boolean {
    const progress = (goal.current / goal.target) * 100;
    const daysUntilDeadline = goal.deadline 
      ? Math.ceil((goal.deadline.getTime() - Date.now()) / (1000 * 60 * 60 * 24))
      : null;

    // Meta estancada con deadline pr√≥ximo
    if (this.isGoalStuck(goal) && daysUntilDeadline && daysUntilDeadline <= 14) {
      return true;
    }

    // Progreso muy bajo con deadline pr√≥ximo
    if (progress < 50 && daysUntilDeadline && daysUntilDeadline <= 30) {
      return true;
    }

    return false;
  }

  // Generar notificaci√≥n autom√°tica basada en el progreso de una meta
  generateGoalNotification(goal: Goal): Notification {
    const progress = (goal.current / goal.target) * 100;
    const daysUntilDeadline = goal.deadline 
      ? Math.ceil((goal.deadline.getTime() - Date.now()) / (1000 * 60 * 60 * 24))
      : null;

    let type: Notification['type'] = 'reminder';
    let title = '';
    let message = '';

    // üéâ FELICITACI√ìN AL 100% - PRIORIDAD M√ÅXIMA
    if (progress >= 100 && goal.status !== 'Completado') {
      type = 'achievement';
      title = `üéâ ¬°META COMPLETADA: ${goal.title}!`;
      message = `¬°BRUTAL! Has alcanzado el 100% de tu meta "${goal.title}". Eres una m√°quina de resultados. ¬øCu√°l ser√° tu pr√≥ximo desaf√≠o? ¬°No te detengas ahora!`;
      return {
        id: `notification-${Date.now()}`,
        type,
        title,
        message,
        goalId: goal.id,
        createdAt: new Date(),
        isRead: false,
        actionRequired: false,
        actionUrl: '/metas',
        priority: 'critical'
      };
    }

    // üö® ATENCI√ìN URGENTE - Meta estancada o en riesgo
    if (this.needsUrgentAttention(goal)) {
      type = 'warning';
      title = `üö® ATENCI√ìN URGENTE: ${goal.title}`;
      message = `¬°ALERTA! Tu meta "${goal.title}" necesita atenci√≥n inmediata. ${this.isGoalStuck(goal) ? 'No has reportado progreso en 7 d√≠as.' : 'Progreso muy bajo con deadline pr√≥ximo.'} ¬øQu√© est√° bloqueando tu avance? Necesito que act√∫es HOY.`;
      return {
        id: `notification-${Date.now()}`,
        type,
        title,
        message,
        goalId: goal.id,
        createdAt: new Date(),
        isRead: false,
        actionRequired: true,
        actionUrl: '/metas',
        priority: 'critical'
      };
    }

    // üìà CASI LO LOGRAS - Progreso alto
    if (progress >= 80) {
      type = 'motivation';
      title = `üìà ¬°Casi lo logras: ${goal.title}`;
      message = `¬°Excelente progreso! Est√°s al ${progress.toFixed(1)}% de tu meta. El √∫ltimo esfuerzo es el m√°s importante. ¬øQu√© necesitas para cruzar la meta? ¬°No aflojes ahora!`;
    } 
    // ‚ö†Ô∏è DEADLINE PR√ìXIMO
    else if (daysUntilDeadline && daysUntilDeadline <= 7) {
      type = 'warning';
      title = `‚ö†Ô∏è ¬°Urgente: ${goal.title}`;
      message = `¬°Atenci√≥n! Solo quedan ${daysUntilDeadline} d√≠as para tu deadline. Est√°s al ${progress.toFixed(1)}% de tu meta. ¬øNecesitas ayuda para acelerar el progreso?`;
    } 
    // üöÄ EMPEZANDO - Progreso bajo
    else if (progress < 30) {
      type = 'motivation';
      title = `üöÄ ¬°Empieza fuerte: ${goal.title}`;
      message = `Veo que est√°s comenzando con ${goal.title}. ¬øQu√© obst√°culos has identificado? ¬øC√≥mo puedo ayudarte a avanzar m√°s r√°pido? ¬°No te quedes en la zona de confort!`;
    } 
    // üìä SEGUIMIENTO GENERAL
    else {
      type = 'reminder';
      title = `üìä Actualizaci√≥n: ${goal.title}`;
      message = `¬øC√≥mo va el progreso con ${goal.title}? Est√°s al ${progress.toFixed(1)}% de tu meta. ¬øQu√© necesitas para mantener el momentum?`;
    }

    return {
      id: `notification-${Date.now()}`,
      type,
      title,
      message,
      goalId: goal.id,
      createdAt: new Date(),
      isRead: false,
      actionRequired: type === 'warning' || type === 'reminder',
      actionUrl: '/metas'
    };
  }

  // Generar notificaci√≥n de nueva meta creada
  generateNewGoalNotification(goal: Goal): Notification {
    return {
      id: `notification-${Date.now()}`,
      type: 'info',
      title: `üéØ ¬°Nueva meta establecida: ${goal.title}!`,
      message: `Has creado exitosamente tu meta "${goal.title}" con objetivo de ${goal.target} ${goal.unit}. La meta est√° ahora en seguimiento activo. ¬°Es hora de empezar a trabajar!`,
      goalId: goal.id,
      createdAt: new Date(),
      isRead: false,
      actionRequired: false,
      actionUrl: '/metas',
      priority: 'high'
    };
  }

  // Generar recordatorio programado con sistema de insistencia
  generateScheduledReminder(goal: Goal): CoachReminder {
    const isStuck = this.isGoalStuck(goal);
    const needsUrgent = this.needsUrgentAttention(goal);
    const progress = (goal.current / goal.target) * 100;

    let messages: string[];
    let motivationType: 'encouragement' | 'challenge' | 'reflection' | 'celebration' | 'urgent';

    if (needsUrgent) {
      motivationType = 'urgent';
      messages = [
        `üö® URGENTE: ${goal.title} necesita atenci√≥n inmediata. ¬øQu√© est√°s haciendo HOY para avanzar?`,
        `‚ö†Ô∏è ALERTA: ${goal.title} est√° en riesgo. ¬øCu√°l es tu plan de acci√≥n para los pr√≥ximos 3 d√≠as?`,
        `üî• CR√çTICO: ${goal.title} requiere acci√≥n inmediata. ¬øQu√© obst√°culo vas a eliminar hoy?`
      ];
    } else if (isStuck) {
      motivationType = 'challenge';
      messages = [
        `üí™ ¬øEst√°s desafi√°ndote lo suficiente con ${goal.title}? A veces necesitamos salir de nuestra zona de confort.`,
        `üéØ ¬øQu√© obst√°culo te est√° impidiendo avanzar m√°s r√°pido en ${goal.title}?`,
        `‚ö° ¬øHas considerado todas las opciones para acelerar ${goal.title}?`
      ];
    } else if (progress >= 80) {
      motivationType = 'celebration';
      messages = [
        `üéâ ¬°Excelente trabajo en ${goal.title}! ¬øQu√© te gustar√≠a celebrar hoy?`,
        `üèÜ Has hecho un progreso significativo en ${goal.title}. ¬øQu√© te hace sentir m√°s orgulloso?`,
        `‚≠ê ¬°Bien hecho! ${goal.title} est√° avanzando. ¬øQu√© estrategia te est√° funcionando mejor?`
      ];
    } else {
      motivationType = 'encouragement';
      messages = [
        `üí™ ¬øC√≥mo va el progreso con ${goal.title}? Recuerda que cada peque√±o paso cuenta.`,
        `üöÄ ¬°Hoy es un buen d√≠a para avanzar en ${goal.title}! ¬øQu√© puedes hacer diferente?`,
        `üìà Veo que has progresado en ${goal.title}. ¬øQu√© te est√° funcionando mejor?`
      ];
    }

    const selectedMessage = messages[Math.floor(Math.random() * messages.length)];

    return {
      id: `reminder-${Date.now()}`,
      goalId: goal.id,
      message: selectedMessage,
      scheduledFor: new Date(Date.now() + 24 * 60 * 60 * 1000), // Ma√±ana
      sent: false,
      motivationType
    };
  }

  // Verificar metas completadas y generar felicitaciones
  checkCompletedGoals(goals: Goal[]): Notification[] {
    const newNotifications: Notification[] = [];
    
    goals.forEach(goal => {
      const progress = (goal.current / goal.target) * 100;
      
      // Si la meta est√° al 100% pero no est√° marcada como completada
      if (progress >= 100 && goal.status !== 'Completado') {
        const notification = this.generateGoalNotification(goal);
        newNotifications.push(notification);
      }
    });

    return newNotifications;
  }

  // Verificar metas que necesitan insistencia
  checkStuckGoals(goals: Goal[]): Notification[] {
    const newNotifications: Notification[] = [];
    
    goals.forEach(goal => {
      if (this.needsUrgentAttention(goal)) {
        const notification = this.generateGoalNotification(goal);
        newNotifications.push(notification);
      }
    });

    return newNotifications;
  }

  // Obtener notificaciones no le√≠das
  getUnreadNotifications(): Notification[] {
    return this.notifications.filter(n => !n.read);
  }

  // Marcar notificaci√≥n como le√≠da
  markAsRead(notificationId: string): void {
    const notification = this.notifications.find(n => n.id === notificationId);
    if (notification) {
      notification.read = true;
      this.saveNotifications();
    }
  }

  // Eliminar notificaci√≥n
  deleteNotification(notificationId: string): void {
    this.notifications = this.notifications.filter(n => n.id !== notificationId);
    this.saveNotifications();
  }

  // Agregar nueva notificaci√≥n
  addNotification(notification: Notification): void {
    this.notifications.unshift(notification);
    this.saveNotifications();
  }

  // Obtener todas las notificaciones
  getAllNotifications(): Notification[] {
    return this.notifications;
  }

  // Verificar si hay recordatorios pendientes
  checkScheduledReminders(goals: Goal[]): Notification[] {
    const now = new Date();
    const newNotifications: Notification[] = [];

    goals.forEach(goal => {
      if (goal.nextReminder && goal.nextReminder <= now) {
        const notification = this.generateGoalNotification(goal);
        newNotifications.push(notification);
        
        // Programar pr√≥ximo recordatorio
        const nextReminderDate = this.calculateNextReminder(goal);
        goal.nextReminder = nextReminderDate;
      }
    });

    // Agregar las nuevas notificaciones
    newNotifications.forEach(notification => {
      this.addNotification(notification);
    });

    return newNotifications;
  }

  private calculateNextReminder(goal: Goal): Date {
    const now = new Date();
    
    // Si la meta necesita atenci√≥n urgente, recordar m√°s frecuentemente
    if (this.needsUrgentAttention(goal)) {
      return new Date(now.getTime() + 12 * 60 * 60 * 1000); // Cada 12 horas
    }
    
    // Si est√° estancada, recordar diariamente
    if (this.isGoalStuck(goal)) {
      return new Date(now.getTime() + 24 * 60 * 60 * 1000); // Diario
    }
    
    switch (goal.reminderFrequency) {
      case 'daily':
        return new Date(now.getTime() + 24 * 60 * 60 * 1000);
      case 'weekly':
        return new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
      case 'monthly':
        return new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
      default:
        return new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
    }
  }

  // Limpiar notificaciones antiguas (m√°s de 30 d√≠as)
  cleanupOldNotifications(): void {
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    this.notifications = this.notifications.filter(n => n.createdAt > thirtyDaysAgo);
    this.saveNotifications();
  }
}

export const notificationService = new NotificationService();
